diff --git a/cli/config.go b/cli/config.go
index 0f72b9e..6af55a4 100644
--- a/cli/config.go
+++ b/cli/config.go
@@ -69,7 +69,10 @@ type Config struct {
 	AKI               string
 	DBConfigFile      string
 	CRLExpiration     time.Duration
-	Disable     	  string
+	Disable           string
+	Pkcs11Module      string
+	Pkcs11Token       string
+	Pkcs11Pin         string
 }
 
 // registerFlags defines all cfssl command flags and associates their values with variables.
@@ -132,6 +135,9 @@ func registerFlags(c *Config, f *flag.FlagSet) {
 	f.DurationVar(&c.CRLExpiration, "expiry", 7*helpers.OneDay, "time from now after which the CRL will expire (default: one week)")
 	f.IntVar(&log.Level, "loglevel", log.LevelInfo, "Log level (0 = DEBUG, 5 = FATAL)")
 	f.StringVar(&c.Disable, "disable", "", "endpoints to disable")
+	f.StringVar(&c.Pkcs11Module, "pkcs11-module", "", "Path to pkcs11 enabled library")
+	f.StringVar(&c.Pkcs11Token, "pkcs11-token", "", "The label of the token containing the private key")
+	f.StringVar(&c.Pkcs11Pin, "pkcs11-pin", "", "The user pin of the device")
 }
 
 // RootFromConfig returns a universal signer Root structure that can
@@ -139,8 +145,11 @@ func registerFlags(c *Config, f *flag.FlagSet) {
 func RootFromConfig(c *Config) universal.Root {
 	return universal.Root{
 		Config: map[string]string{
-			"cert-file": c.CAFile,
-			"key-file":  c.CAKeyFile,
+			"cert-file":     c.CAFile,
+			"key-file":      c.CAKeyFile,
+			"pkcs11-module": c.Pkcs11Module,
+			"pkcs11-token":  c.Pkcs11Token,
+			"pkcs11-pin":    c.Pkcs11Pin,
 		},
 		ForceRemote: c.Remote != "",
 	}
diff --git a/cli/gencert/gencert.go b/cli/gencert/gencert.go
index 7494d2e..86190ee 100644
--- a/cli/gencert/gencert.go
+++ b/cli/gencert/gencert.go
@@ -4,7 +4,6 @@ package gencert
 import (
 	"encoding/json"
 	"errors"
-
 	"github.com/cloudflare/cfssl/api/generator"
 	"github.com/cloudflare/cfssl/cli"
 	"github.com/cloudflare/cfssl/cli/genkey"
@@ -13,6 +12,7 @@ import (
 	"github.com/cloudflare/cfssl/initca"
 	"github.com/cloudflare/cfssl/log"
 	"github.com/cloudflare/cfssl/signer"
+	"github.com/cloudflare/cfssl/signer/pkcs11"
 )
 
 var gencertUsageText = `cfssl gencert -- generate a new key and signed certificate
@@ -35,7 +35,7 @@ Arguments:
 Flags:
 `
 
-var gencertFlags = []string{"initca", "remote", "ca", "ca-key", "config", "cn", "hostname", "profile", "label"}
+var gencertFlags = []string{"initca", "remote", "ca", "ca-key", "config", "cn", "hostname", "profile", "label", "pkcs11-module", "pkcs11-token", "pkcs11-pin"}
 
 func gencertMain(args []string, c cli.Config) error {
 	if c.RenewCA {
@@ -85,13 +85,25 @@ func gencertMain(args []string, c cli.Config) error {
 			}
 		} else {
 			log.Infof("generating a new CA key and certificate from CSR")
-			cert, csrPEM, key, err = initca.New(&req)
-			if err != nil {
-				return err
+			if c.Pkcs11Token != "" {
+				log.Infof("use pkcs11 token: " + c.Pkcs11Token)
+				cert, csrPEM, err := pkcs11.InitializeNewCA(&req, &pkcs11.Config{
+					Module: c.Pkcs11Module,
+					PIN:    c.Pkcs11Pin,
+					Token:  c.Pkcs11Token,
+				})
+				if err != nil {
+					return err
+				}
+				cli.PrintCert([]byte("hardware-baked private key"), csrPEM, cert)
+			} else {
+				cert, csrPEM, key, err = initca.New(&req)
+				if err != nil {
+					return err
+				}
+				cli.PrintCert(key, csrPEM, cert)
 			}
-
 		}
-		cli.PrintCert(key, csrPEM, cert)
 
 	default:
 		if req.CA != nil {
diff --git a/go.mod b/go.mod
index d1209e9..c810b2d 100644
--- a/go.mod
+++ b/go.mod
@@ -18,8 +18,10 @@ require (
 	github.com/kisielk/sqlstruct v0.0.0-20150923205031-648daed35d49
 	github.com/kisom/goutils v1.1.0
 	github.com/kylelemons/go-gypsy v0.0.0-20160905020020-08cad365cd28 // indirect
+	github.com/letsencrypt/pkcs11key/v4 v4.0.0
 	github.com/lib/pq v0.0.0-20180201184707-88edab080323
 	github.com/mattn/go-sqlite3 v1.10.0
+	github.com/miekg/pkcs11 v1.0.3
 	github.com/pkg/errors v0.8.0 // indirect
 	github.com/weppos/publicsuffix-go v0.5.0 // indirect
 	github.com/ziutek/mymysql v1.5.4 // indirect
diff --git a/go.sum b/go.sum
index e94d4b2..23c7539 100644
--- a/go.sum
+++ b/go.sum
@@ -45,10 +45,15 @@ github.com/kr/text v0.1.0 h1:45sCR5RtlFHMR4UwH9sdQ5TC8v0qDQCHnXt+kaKSTVE=
 github.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=
 github.com/kylelemons/go-gypsy v0.0.0-20160905020020-08cad365cd28 h1:mkl3tvPHIuPaWsLtmHTybJeoVEW7cbePK73Ir8VtruA=
 github.com/kylelemons/go-gypsy v0.0.0-20160905020020-08cad365cd28/go.mod h1:T/T7jsxVqf9k/zYOqbgNAsANsjxTd1Yq3htjDhQ1H0c=
+github.com/letsencrypt/pkcs11key/v4 v4.0.0 h1:qLc/OznH7xMr5ARJgkZCCWk+EomQkiNTOoOF5LAgagc=
+github.com/letsencrypt/pkcs11key/v4 v4.0.0/go.mod h1:EFUvBDay26dErnNb70Nd0/VW3tJiIbETBPTl9ATXQag=
 github.com/lib/pq v0.0.0-20180201184707-88edab080323 h1:Ou506ViB5uo2GloKFWIYi5hwRJn4AAOXuLVv8RMY9+4=
 github.com/lib/pq v0.0.0-20180201184707-88edab080323/go.mod h1:5WUZQaWbwv1U+lTReE5YruASi9Al49XbQIvNi/34Woo=
 github.com/mattn/go-sqlite3 v1.10.0 h1:jbhqpg7tQe4SupckyijYiy0mJJ/pRyHvXf7JdWK860o=
 github.com/mattn/go-sqlite3 v1.10.0/go.mod h1:FPy6KqzDD04eiIsT53CuJW3U88zkxoIYsOqkbpncsNc=
+github.com/miekg/pkcs11 v1.0.2/go.mod h1:XsNlhZGX73bx86s2hdc/FuaLm2CPZJemRLMA+WTFxgs=
+github.com/miekg/pkcs11 v1.0.3 h1:iMwmD7I5225wv84WxIG/bmxz9AXjWvTWIbM/TYHvWtw=
+github.com/miekg/pkcs11 v1.0.3/go.mod h1:XsNlhZGX73bx86s2hdc/FuaLm2CPZJemRLMA+WTFxgs=
 github.com/mreiferson/go-httpclient v0.0.0-20160630210159-31f0106b4474/go.mod h1:OQA4XLvDbMgS8P0CevmM4m9Q3Jq4phKUzcocxuGJ5m8=
 github.com/nkovacs/streamquote v0.0.0-20170412213628-49af9bddb229 h1:E2B8qYyeSgv5MXpmzZXRNp8IAQ4vjxIjhpAf5hv/tAg=
 github.com/nkovacs/streamquote v0.0.0-20170412213628-49af9bddb229/go.mod h1:0aYXnNPJ8l7uZxf45rWW1a/uME32OF0rhiYGNQ2oF2E=
diff --git a/signer/universal/universal.go b/signer/universal/universal.go
index 50b44a6..c794e4f 100644
--- a/signer/universal/universal.go
+++ b/signer/universal/universal.go
@@ -11,6 +11,7 @@ import (
 	"github.com/cloudflare/cfssl/info"
 	"github.com/cloudflare/cfssl/signer"
 	"github.com/cloudflare/cfssl/signer/local"
+	"github.com/cloudflare/cfssl/signer/pkcs11"
 	"github.com/cloudflare/cfssl/signer/remote"
 )
 
@@ -48,6 +49,7 @@ func fileBackedSigner(root *Root, policy *config.Signing) (signer.Signer, bool,
 
 var localSignerList = []localSignerCheck{
 	fileBackedSigner,
+	pkcs11Signer,
 }
 
 // PrependLocalSignerToList prepends signer to the local signer's list
@@ -220,3 +222,23 @@ func (s *Signer) SetPolicy(policy *config.Signing) {
 func (s *Signer) Policy() *config.Signing {
 	return s.policy
 }
+
+func pkcs11Signer(root *Root, policy *config.Signing) (signer.Signer, bool, error) {
+	cert := root.Config["cert-file"]
+	module := root.Config["pkcs11-module"]
+	pin := root.Config["pkcs11-pin"]
+	token := root.Config["pkcs11-token"]
+
+	config := pkcs11.Config{
+		Module: module,
+		PIN:    pin,
+		Token:  token,
+	}
+
+	signer, err := pkcs11.New(cert, policy, &config)
+	if err != nil {
+		return nil, false, err
+	}
+
+	return signer, true, err
+}
diff --git a/vendor/modules.txt b/vendor/modules.txt
index df696d0..33ba3fe 100644
--- a/vendor/modules.txt
+++ b/vendor/modules.txt
@@ -65,11 +65,15 @@ github.com/kisielk/sqlstruct
 github.com/kisom/goutils/assert
 # github.com/kylelemons/go-gypsy v0.0.0-20160905020020-08cad365cd28
 github.com/kylelemons/go-gypsy/yaml
+# github.com/letsencrypt/pkcs11key/v4 v4.0.0
+github.com/letsencrypt/pkcs11key/v4
 # github.com/lib/pq v0.0.0-20180201184707-88edab080323
 github.com/lib/pq
 github.com/lib/pq/oid
 # github.com/mattn/go-sqlite3 v1.10.0
 github.com/mattn/go-sqlite3
+# github.com/miekg/pkcs11 v1.0.3
+github.com/miekg/pkcs11
 # github.com/nkovacs/streamquote v0.0.0-20170412213628-49af9bddb229
 github.com/nkovacs/streamquote
 # github.com/pkg/errors v0.8.0
