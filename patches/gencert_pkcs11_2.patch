diff --git a/signer/pkcs11/pkcs11.go b/signer/pkcs11/pkcs11.go
new file mode 100644
index 0000000..39da95f
--- /dev/null
+++ b/signer/pkcs11/pkcs11.go
@@ -0,0 +1,391 @@
+package pkcs11
+
+import (
+	"crypto"
+	"crypto/rand"
+	"crypto/rsa"
+	"crypto/x509"
+	"crypto/x509/pkix"
+	"encoding/asn1"
+	"encoding/pem"
+	"errors"
+	"fmt"
+	"github.com/cloudflare/cfssl/config"
+	"github.com/cloudflare/cfssl/csr"
+	cferr "github.com/cloudflare/cfssl/errors"
+	"github.com/cloudflare/cfssl/helpers"
+	"github.com/cloudflare/cfssl/log"
+	"github.com/cloudflare/cfssl/signer"
+	"github.com/cloudflare/cfssl/signer/local"
+	"github.com/letsencrypt/pkcs11key/v4"
+	"github.com/miekg/pkcs11"
+	"math/big"
+	"net"
+	"net/mail"
+	"net/url"
+	"sync"
+	"time"
+)
+
+// Config struct
+type Config struct {
+	Module string
+	PIN    string
+	Token  string
+}
+
+var pkcs11mutex sync.Mutex
+
+func InitializeNewCA(req *csr.CertificateRequest, conf *Config) (cert, csrPEM []byte, err error) {
+	pkcs11mutex.Lock()
+	defer pkcs11mutex.Unlock()
+
+	p, session, slot, err := initializePkcs11(conf)
+	if err != nil {
+		return nil, nil, err
+	}
+	defer p.Logout(session)
+	defer p.CloseAllSessions(slot)
+	defer p.Finalize()
+	defer p.Destroy()
+
+	pubKey, err := generateKeyPairOnToken(p, session, conf, true)
+	if err != nil {
+		return nil, nil, err
+	}
+	cryptoSigner, err := initPkcs11Signer(pubKey, conf)
+	if err != nil {
+		return nil, nil, err
+	}
+	csrPEM, err = generateCsr(cryptoSigner, req)
+	if err != nil {
+		return nil, nil, err
+	}
+	signReq := signer.SignRequest{Hosts: req.Hosts, Request: string(csrPEM)}
+
+	cfsslSigner, err := createCfsslPkcsCASigner(req, cryptoSigner)
+	if err != nil {
+		return nil, nil, err
+	}
+	cert, err = cfsslSigner.Sign(signReq)
+	if err != nil {
+		return nil, nil, err
+	}
+	return cert, csrPEM, nil
+}
+
+func initializePkcs11(conf *Config) (*pkcs11.Ctx, pkcs11.SessionHandle, uint, error) {
+	p := pkcs11.New(conf.Module)
+	err := p.Initialize()
+	if err != nil {
+		return nil, 0, 0, err
+	}
+	slots, err := p.GetSlotList(true)
+	if err != nil {
+		return nil, 0, 0, err
+	}
+
+	var slotToUse uint
+	for _, slot := range slots {
+		// Check that token label matches.
+		tokenInfo, err := p.GetTokenInfo(slot)
+		if err != nil {
+			return nil, 0, 0, err
+		}
+		if tokenInfo.Label != conf.Token {
+			continue
+		}
+		slotToUse = slot
+	}
+
+	session, err := p.OpenSession(slotToUse, pkcs11.CKF_SERIAL_SESSION|pkcs11.CKF_RW_SESSION)
+	if err != nil {
+		return nil, 0, 0, err
+	}
+
+	err = p.Login(session, pkcs11.CKU_USER, conf.PIN)
+	if err != nil {
+		return nil, 0, 0, err
+	}
+	return p, session, slotToUse, nil
+}
+
+/*
+Purpose: Generate RSA keypair with a given name and persistence.
+Inputs: test object
+	context
+	session handle
+	tokenLabel: string to set as the token labels
+	tokenPersistent: boolean. Whether or not the token should be
+			session based or persistent. If false, the
+			token will not be saved in the HSM and is
+			destroyed upon termination of the session.
+Outputs: creates persistent or ephemeral tokens within the HSM.
+Returns: object handles for public and private keys. Fatal on error.
+*/
+func generateKeyPairOnToken(p *pkcs11.Ctx, session pkcs11.SessionHandle, conf *Config, tokenPersistent bool) (pubKey crypto.PublicKey, err error) {
+	pubKey, err = checkCAKeyPairOnToken(p, session, conf.Token)
+	if err != nil {
+		return nil, err
+	}
+	if pubKey != nil {
+		return pubKey, nil
+	}
+
+	publicKeyTemplate := []*pkcs11.Attribute{
+		pkcs11.NewAttribute(pkcs11.CKA_CLASS, pkcs11.CKO_PUBLIC_KEY),
+		pkcs11.NewAttribute(pkcs11.CKA_KEY_TYPE, pkcs11.CKK_RSA),
+		pkcs11.NewAttribute(pkcs11.CKA_TOKEN, tokenPersistent),
+		pkcs11.NewAttribute(pkcs11.CKA_VERIFY, true),
+		pkcs11.NewAttribute(pkcs11.CKA_PUBLIC_EXPONENT, []byte{1, 0, 0, 0, 1}),
+		pkcs11.NewAttribute(pkcs11.CKA_MODULUS_BITS, 2048),
+		pkcs11.NewAttribute(pkcs11.CKA_LABEL, conf.Token),
+	}
+	privateKeyTemplate := []*pkcs11.Attribute{
+		pkcs11.NewAttribute(pkcs11.CKA_TOKEN, tokenPersistent),
+		pkcs11.NewAttribute(pkcs11.CKA_SIGN, true),
+		pkcs11.NewAttribute(pkcs11.CKA_LABEL, conf.Token),
+		pkcs11.NewAttribute(pkcs11.CKA_SENSITIVE, true),
+		pkcs11.NewAttribute(pkcs11.CKA_EXTRACTABLE, false),
+	}
+	pbk, _, err := p.GenerateKeyPair(session,
+		[]*pkcs11.Mechanism{pkcs11.NewMechanism(pkcs11.CKM_RSA_PKCS_KEY_PAIR_GEN, nil)},
+		publicKeyTemplate, privateKeyTemplate)
+	if err != nil {
+		return nil, err
+	}
+
+	pubKey, err = extractPublicKey(p, session, pbk, conf.Token)
+	if err != nil {
+		return nil, err
+	}
+	return pubKey, err
+}
+func checkCAKeyPairOnToken(p *pkcs11.Ctx, session pkcs11.SessionHandle, label string) (crypto.PublicKey, error) {
+	publicKeyTemplate := []*pkcs11.Attribute{
+		pkcs11.NewAttribute(pkcs11.CKA_CLASS, pkcs11.CKO_PUBLIC_KEY),
+		pkcs11.NewAttribute(pkcs11.CKA_KEY_TYPE, pkcs11.CKK_RSA),
+		pkcs11.NewAttribute(pkcs11.CKA_LABEL, label),
+	}
+	pubKey, err := findObjectOnToken(p, session, publicKeyTemplate)
+	if err != nil {
+		return nil, err
+	}
+	privateKeyTemplate := []*pkcs11.Attribute{
+		pkcs11.NewAttribute(pkcs11.CKA_CLASS, pkcs11.CKO_PRIVATE_KEY),
+		pkcs11.NewAttribute(pkcs11.CKA_KEY_TYPE, pkcs11.CKK_RSA),
+		pkcs11.NewAttribute(pkcs11.CKA_LABEL, label),
+	}
+	privKey, err := findObjectOnToken(p, session, privateKeyTemplate)
+	if err != nil {
+		return nil, err
+	}
+	if pubKey == 0 || privKey == 0 {
+		return nil, nil
+	}
+	return extractPublicKey(p, session, pubKey, label)
+}
+func findObjectOnToken(p *pkcs11.Ctx, session pkcs11.SessionHandle, attributes []*pkcs11.Attribute) (pkcs11.ObjectHandle, error) {
+	err := p.FindObjectsInit(session, attributes)
+	if err != nil {
+		return 0, err
+	}
+	handles, moreAvailable, err := p.FindObjects(session, 1)
+	if err != nil {
+		return 0, err
+	}
+	if err = p.FindObjectsFinal(session); err != nil {
+		return 0, err
+	}
+	if moreAvailable {
+		return 0, errors.New("[findObjectOnToken] too many objects returned from FindObjects")
+	}
+	if len(handles) == 1 {
+		return handles[0], nil
+	}
+	return 0, nil
+}
+func extractPublicKey(p *pkcs11.Ctx, session pkcs11.SessionHandle, pubKeyHandle pkcs11.ObjectHandle, label string) (crypto.PublicKey, error) {
+	publicKeyTemplate := []*pkcs11.Attribute{
+		pkcs11.NewAttribute(pkcs11.CKA_CLASS, pkcs11.CKO_PUBLIC_KEY),
+		pkcs11.NewAttribute(pkcs11.CKA_KEY_TYPE, pkcs11.CKK_RSA),
+		pkcs11.NewAttribute(pkcs11.CKA_LABEL, label),
+	}
+	err := p.FindObjectsInit(session, publicKeyTemplate)
+	if err != nil {
+		return nil, err
+	}
+	handles, moreAvailable, err := p.FindObjects(session, 1)
+	if moreAvailable {
+		return nil, errors.New("too many objects returned from FindObjects")
+	}
+	if err = p.FindObjectsFinal(session); err != nil {
+		return nil, err
+	} else if len(handles) == 0 {
+		return nil, errors.New("no objects found")
+	}
+	attrs, err := p.GetAttributeValue(session, pubKeyHandle, []*pkcs11.Attribute{
+		pkcs11.NewAttribute(pkcs11.CKA_MODULUS, nil),
+	})
+	if err != nil {
+		return nil, err
+	}
+	if len(attrs) != 1 || attrs[0].Type != pkcs11.CKA_MODULUS {
+		return nil, fmt.Errorf("invalid result from GetAttributeValue")
+	}
+
+	modulus := new(big.Int)
+	modulus.SetBytes(attrs[0].Value)
+
+	publicKey := &rsa.PublicKey{
+		N: modulus,
+		E: 65537,
+	}
+	return publicKey, nil
+}
+
+// Generate creates a new CSR from a CertificateRequest structure and
+// an existing key. The KeyRequest field is ignored.
+func generateCsr(cryptoSigner crypto.Signer, req *csr.CertificateRequest) (csr []byte, err error) {
+	sigAlgo := signer.DefaultSigAlgo(cryptoSigner)
+	if sigAlgo == x509.UnknownSignatureAlgorithm {
+		return nil, cferr.New(cferr.PrivateKeyError, cferr.Unavailable)
+	}
+	var tpl = x509.CertificateRequest{
+		Subject:            req.Name(),
+		SignatureAlgorithm: sigAlgo,
+	}
+	for i := range req.Hosts {
+		if ip := net.ParseIP(req.Hosts[i]); ip != nil {
+			tpl.IPAddresses = append(tpl.IPAddresses, ip)
+		} else if email, err := mail.ParseAddress(req.Hosts[i]); err == nil && email != nil {
+			tpl.EmailAddresses = append(tpl.EmailAddresses, email.Address)
+		} else if uri, err := url.ParseRequestURI(req.Hosts[i]); err == nil && uri != nil {
+			tpl.URIs = append(tpl.URIs, uri)
+		} else {
+			tpl.DNSNames = append(tpl.DNSNames, req.Hosts[i])
+		}
+	}
+	if req.CA != nil {
+		err = appendCAInfoToCSR(req.CA, &tpl)
+		if err != nil {
+			err = cferr.Wrap(cferr.CSRError, cferr.GenerationFailed, err)
+			return
+		}
+	}
+	csr, err = x509.CreateCertificateRequest(rand.Reader, &tpl, cryptoSigner)
+	if err != nil {
+		log.Errorf("failed to generate a CSR: %v", err)
+		err = cferr.Wrap(cferr.CSRError, cferr.BadRequest, err)
+		return
+	}
+	block := pem.Block{
+		Type:  "CERTIFICATE REQUEST",
+		Bytes: csr,
+	}
+
+	log.Info("encoded CSR")
+	csr = pem.EncodeToMemory(&block)
+	return
+}
+
+// appendCAInfoToCSR appends CAConfig BasicConstraint extension to a CSR
+func appendCAInfoToCSR(reqConf *csr.CAConfig, csr *x509.CertificateRequest) error {
+	// BasicConstraints CSR information RFC 5280, 4.2.1.9
+	type BasicConstraints struct {
+		IsCA       bool `asn1:"optional"`
+		MaxPathLen int  `asn1:"optional,default:-1"`
+	}
+
+	pathlen := reqConf.PathLength
+	if pathlen == 0 && !reqConf.PathLenZero {
+		pathlen = -1
+	}
+	val, err := asn1.Marshal(BasicConstraints{true, pathlen})
+	if err != nil {
+		return err
+	}
+	csr.ExtraExtensions = []pkix.Extension{
+		{
+			Id:       asn1.ObjectIdentifier{2, 5, 29, 19},
+			Value:    val,
+			Critical: true,
+		},
+	}
+	return nil
+}
+func createCfsslPkcsCASigner(req *csr.CertificateRequest, cryptoSigner crypto.Signer) (cfsslSigner signer.Signer, err error) {
+	// CAPolicy contains the CA issuing policy as default policy.
+	var CAPolicy = func() *config.Signing {
+		return &config.Signing{
+			Default: &config.SigningProfile{
+				Usage:        []string{"cert sign", "crl sign"},
+				ExpiryString: "43800h",
+				Expiry:       5 * helpers.OneYear,
+				CAConstraint: config.CAConstraint{IsCA: true},
+			},
+		}
+	}
+	policy := CAPolicy()
+	if req.CA != nil {
+		if req.CA.Expiry != "" {
+			policy.Default.ExpiryString = req.CA.Expiry
+			policy.Default.Expiry, err = time.ParseDuration(req.CA.Expiry)
+			if err != nil {
+				return
+			}
+		}
+
+		if req.CA.Backdate != "" {
+			policy.Default.Backdate, err = time.ParseDuration(req.CA.Backdate)
+			if err != nil {
+				return
+			}
+		}
+
+		policy.Default.CAConstraint.MaxPathLen = req.CA.PathLength
+		if req.CA.PathLength != 0 && req.CA.PathLenZero {
+			log.Infof("ignore invalid 'pathlenzero' value")
+		} else {
+			policy.Default.CAConstraint.MaxPathLenZero = req.CA.PathLenZero
+		}
+	}
+
+	cfsslSigner, err = local.NewSigner(cryptoSigner, nil, signer.DefaultSigAlgo(cryptoSigner), policy)
+	if err != nil {
+		return nil, err
+	}
+	return cfsslSigner, nil
+}
+func initPkcs11Signer(key crypto.PublicKey, conf *Config) (crypto.Signer, error) {
+	log.Debugf("Loading PKCS11 Module %s", conf.Module)
+	privkey, err := pkcs11key.New(conf.Module, conf.Token, conf.PIN, key)
+	if err != nil {
+		return nil, err
+	}
+	return privkey, nil
+}
+
+// New instantiates the pkcs11 signer
+func New(cert string, policy *config.Signing, conf *Config) (signer.Signer, error) {
+	cacertdata, err := helpers.ReadBytes(cert)
+	if err != nil {
+		return nil, errors.New("Unable to read CA Certificate")
+	}
+	cacertparsed, err := helpers.ParseCertificatePEM(cacertdata)
+	if err != nil {
+		return nil, errors.New("Unable to parse CA Certificate")
+	}
+
+	log.Debugf("Loading PKCS11 Module %s", conf.Module)
+	privkey, err := pkcs11key.New(conf.Module, conf.Token, conf.PIN, cacertparsed.PublicKey)
+	if err != nil {
+		return nil, err
+	}
+	sigAlgo := signer.DefaultSigAlgo(privkey)
+
+	if policy == nil {
+		return nil, nil
+	}
+	return local.NewSigner(privkey, cacertparsed, sigAlgo, policy)
+}
